📌 Endpoint
POST /api/v1/loan/apply

🎯 Deskripsi
Endpoint ini digunakan untuk mengajukan pinjaman oleh pengguna melalui aplikasi mobile.

===================================================================================================

📥 Request Headers
| Key           | Value            |
| ------------- | ---------------- |
| Authorization | Bearer `<token>` |
| Content-Type  | application/json |

📤 Request Body
{
  "user_id": "USR-982134",
  "loan_amount": 3000000,
  "tenor_months": 6,
  "purpose": "Modal usaha",
  "monthly_income": 5000000,
  "employment_status": "Wirausaha",
  "documents": {
    "ktp": "base64_encoded_image",
    "selfie_with_ktp": "base64_encoded_image"
  }
}

✅ Response: Success (200)
{
  "status": "success",
  "message": "Pengajuan pinjaman berhasil diajukan",
  "data": {
    "loan_id": "LOAN-20250507-001",
    "status": "Menunggu Verifikasi",
    "submitted_at": "2025-05-07T13:00:00Z"
  }
}

❌ Response: Validation Error (400)
{
  "status": "error",
  "message": "Validasi gagal",
  "errors": {
    "loan_amount": "Jumlah pinjaman melebihi batas maksimal"
  }
}


==========================================================================================
🔒 Security
    Autentikasi JWT / OAuth 2.0.
    Validasi field melalui schema.
    Upload file terenkripsi (opsional S3 atau server internal).

===========================================================================================

🔁 Integrasi Lanjutan
Setelah data masuk:
    ✅ Dikirim ke middleware SOA.
    🔄 Diteruskan ke core banking untuk verifikasi.
    🔍 Dipantau melalui Kibana (logging) dan Jenkins (CI/CD untuk proses backend).
==============================================================================================

🔧 Dokumentasi
Spesifikasi ini bisa ditulis dalam OpenAPI 3.1 (Swagger/Postman) agar bisa digunakan langsung dalam dokumentasi interaktif API.
===============================================================================================

Penggunaan URL API yang baik dan benar mengikuti prinsip RESTful API design, yang membuatnya konsisten, mudah dimengerti, dan scalable. Berikut adalah panduan serta contoh URL yang baik dalam konteks aplikasi pinjaman online:

✅ Prinsip Penulisan URL API yang Baik
| Aspek                                               | Prinsip Baik                                                          |
| --------------------------------------------------- | --------------------------------------------------------------------- |
| **Lowercase**                                       | Gunakan huruf kecil semua                                             |
| **Kata benda (noun)**                               | Gunakan kata benda untuk merepresentasikan resource, bukan kata kerja |
| **Plural**                                          | Gunakan bentuk jamak (contoh: `/loans`, bukan `/loan`)                |
| **Hierarkis**                                       | Struktur URL mencerminkan hubungan data secara hierarki               |
| **Tanpa versi di domain**                           | Letakkan versi API di path, bukan subdomain (contoh: `/api/v1/...`)   |
| **Gunakan path untuk resource, query untuk filter** | `/loans?status=approved` → bukan `/getLoanByStatus/approved`          |

🔧 Contoh URL API yang Baik dan Benar
| Tujuan                                   | URL yang Baik                       | Metode   |
| ---------------------------------------- | ----------------------------------- | -------- |
| Dapatkan semua pengajuan pinjaman user   | `/api/v1/loans`                     | `GET`    |
| Dapatkan satu pengajuan berdasarkan ID   | `/api/v1/loans/{loan_id}`           | `GET`    |
| Ajukan pinjaman baru                     | `/api/v1/loans`                     | `POST`   |
| Perbarui seluruh data pengajuan          | `/api/v1/loans/{loan_id}`           | `PUT`    |
| Perbarui sebagian data (misalnya tujuan) | `/api/v1/loans/{loan_id}`           | `PATCH`  |
| Batalkan pengajuan                       | `/api/v1/loans/{loan_id}`           | `DELETE` |
| Ambil status pinjaman saja               | `/api/v1/loans/{loan_id}/status`    | `GET`    |
| Ambil riwayat pembayaran pinjaman        | `/api/v1/loans/{loan_id}/payments`  | `GET`    |
| Upload dokumen untuk pinjaman tertentu   | `/api/v1/loans/{loan_id}/documents` | `POST`   |

🚫 Contoh URL yang Tidak Disarankan
/api/v1/getLoanById?id=123   ← ❌ kata kerja & pakai query untuk resource utama
/api/v1/LoanApp/ApplyLoan    ← ❌ huruf besar & kata kerja
/api/v1/loanSubmit           ← ❌ singular & tidak hierarkis

================================================================================================
Penggunaan alert dan kode error yang baik sangat penting untuk memastikan API kamu ramah untuk developer, mudah di-debug, dan aman digunakan. Berikut adalah panduan praktik terbaik disertai contoh yang bisa kamu terapkan dalam sistem pinjaman online.

✅ 1. Struktur Response Error yang Konsisten
Gunakan struktur JSON yang rapi dan konsisten:
{
  "status": "error",
  "message": "Validasi gagal",
  "errors": {
    "loan_amount": "Jumlah pinjaman melebihi batas maksimum"
  }
}

✅ 2. Gunakan HTTP Status Code yang Sesuai
| Kode | Nama                  | Kapan Digunakan                                                             |
| ---- | --------------------- | --------------------------------------------------------------------------- |
| 200  | OK                    | Permintaan berhasil (untuk GET, PATCH sukses)                               |
| 201  | Created               | Data berhasil dibuat (misalnya pengajuan pinjaman baru)                     |
| 400  | Bad Request           | Format request tidak sesuai (misal: field kosong, JSON tidak valid)         |
| 401  | Unauthorized          | Token tidak ada atau tidak valid                                            |
| 403  | Forbidden             | Token valid tapi tidak punya izin (misal: user biasa akses admin)           |
| 404  | Not Found             | Data tidak ditemukan (misal: loan ID tidak ada)                             |
| 422  | Unprocessable Entity  | Validasi gagal, data sah secara format tapi tidak logis (misal: income < 0) |
| 500  | Internal Server Error | Error di sisi server, misal exception tidak ditangani                       |

✅ 3. Pesan Error yang Informatif Tapi Aman
    Jangan tampilkan error database mentah ke client.
    Jangan bocorkan detail server.
    Tampilkan pesan yang jelas untuk user atau developer, misalnya:
    {
      "status": "error",
      "message": "Token tidak valid atau sudah kedaluwarsa"
    }

✅ 4. Alert (Feedback) di Frontend
Contoh praktik frontend alert yang baik:
if (response.status === 422) {
  alert("Data tidak valid: " + response.data.errors.loan_amount);
} else if (response.status === 401) {
  alert("Silakan login kembali. Sesi Anda telah habis.");
} else {
  alert("Terjadi kesalahan. Coba lagi nanti.");
}

✅ 5. Gunakan Kode Error Khusus (Opsional)
Bisa tambahkan kode internal:
{
  "status": "error",
  "code": "LOAN_LIMIT_EXCEEDED",
  "message": "Jumlah pinjaman melebihi batas maksimal",
  "errors": {
    "loan_amount": "Maksimal Rp5.000.000"
  }
}
=============================================================================================
🔒 Tips Keamanan
    Jangan expose stack trace di response API.
    Gunakan log server dan tools seperti Kibana untuk error detail (bukan kirim ke client).
